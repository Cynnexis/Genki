using Genki.SudokuEngine;
using Genki.SudokuEngine.CellEngine;
using Genki.SudokuEngine.GridEngine;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;

namespace Genki
{
	public partial class Frame : Form
	{
		#region Variables & Properties
		public Game game { get; set; }

		private Point activeCell = new Point(-1, -1);

		private string[] pauseButtonsString = {"❚❚", "►"};

		/// <summary>
		/// <para>
		/// The method <c>dvg_grid_CellValueChanged</c> see any modifications as if it came from the user, and therefore parse the data
		/// each time a cell is changed.
		/// </para>
		/// <para>
		/// When the boolean <c>forceChangeCell</c> is true, the method <c>dvg_grid_CellValueChanged</c> knows
		/// that the modification does not came from the user but from the program itsell, and parse the data differently (with less checking).
		/// </para>
		/// <para>
		/// When the parsing is over, <c>dvg_grid_CellValueChanged</c> turns <c>forceChangeCell</c> back to <c>false</c>. Beware to use this
		/// boolean carefully, change it to <c>true</c> JUST BEFORE changing a cell, and nowhere else!
		/// </para>
		/// </summary>
		private bool forceChangeCell = false;
		#endregion

		#region Constructor
		public Frame()
		{
			InitializeComponent();
#if DEBUG
			mi_debug.Visible = true;
#else
			menu.Items.Remove(this.mi_debug);
			//mi_debug.Visible = false;
#endif

			dvg_grid.RowCount = (int)Grid.NB_ROWS;
			dvg_grid.ColumnCount = (int)Grid.NB_COLUMNS;
			dvg_grid.Columns[2].DividerWidth = 2;
			dvg_grid.Columns[5].DividerWidth = 2;
			dvg_grid.Rows[2].DividerHeight = 2;
			dvg_grid.Rows[5].DividerHeight = 2;

			for (int i = 0; i < dvg_grid.RowCount; i++)
			{
				for (int j = 0; j < dvg_grid.Rows[i].Cells.Count; j++)
				{
					dvg_grid[i, j].Value = "";
				}
			}

			game = new Game(new GridListener(
				(x, y, value) =>
				{
					try
					{
						if (x >= 0 && x < Grid.NB_COLUMNS && y >= 0 && y < Grid.NB_ROWS)
						{
							if (value != 0)
								dvg_grid[x, y].Value = value;
							else
								dvg_grid[x, y].Value = "";
							dvg_grid[x, y].ValueType = typeof(string);
						}
					}
					catch (Exception e)
					{
					}
				}
			), new Action(
				() =>
				{
					SyncStopwatch();
				}
			), new ActionOnGameState(
				(oldState, newState) =>
				{
					switch (newState)
					{
						case GameState.PLAYING:
							StartPlaying();
							break;
						case GameState.WIN:
							game.SudokuStopwatch.Activated = false;
							StopPlaying();
							if (MessageBox.Show("Congratulations! You won this Sudoku Grid! Would you like to try again?", "Congratualtions!", MessageBoxButtons.YesNo) == DialogResult.Yes)
								game.ComputeGrid(OnGridIsComputed);
							break;
						default:
							StopPlaying();
							break;
					}
				}
			));

			l_status.Text = "To start playing, click on File > New Game";
		}
		#endregion

		#region Configure Game
		public void StartPlaying()
		{
			b_stopwatchControl.Enabled = true;
			n_cellValue.Enabled = true;
			lb_draft.Enabled = true;
			b_editDraft.Enabled = true;
			b_addDraft.Enabled = true;
			b_removeDraft.Enabled = true;
		}

		public void StopPlaying()
		{
			b_stopwatchControl.Enabled = false;
			n_cellValue.Enabled = false;
			lb_draft.Enabled = false;
			b_editDraft.Enabled = false;
			b_addDraft.Enabled = false;
			b_removeDraft.Enabled = false;
		}
		#endregion

		#region Frame Events
		private void Frame_Shown(object sender, EventArgs e)
		{
			// Updating the position of components depending of the size of their parent.
			dvg_grid_SizeChanged(sender, e);
		}

		private void Frame_FormClosed(object sender, FormClosedEventArgs e)
		{
			game.SudokuStopwatch.StopThread();
		}

		private void Frame_FormClosing(object sender, FormClosingEventArgs e)
		{
			//MessageBox.Show("Do you want to save before quitting?", "Exit", MessageBoxButtons.YesNoCancel);
		}

		/// <summary>
		/// This method is called once a grid has been generated by the object <c>game:Game</c>
		/// </summary>
		/// <seealso cref="Game.ComputeGrid(Action)"/>
		private void OnGridIsComputed()
		{
			l_status.Text = "Grid generated. Have fun!";
#if DEBUG
			mi_printVirtualGrid_Click(null, null);
#endif
			CopyGridIntoDVG();
#if DEBUG
			mi_printPhysicalGrid_Click(null, null);
#endif
			for (int i = 0; i < dvg_grid.ColumnCount; i++)
			{
				for (int j = 0; j < dvg_grid.RowCount; j++)
				{
					dvg_grid[i, j].Style.BackColor = SystemColors.Window;
					if (!Convert.ToString(dvg_grid[i, j].Value).Equals(""))
					{
						dvg_grid[i, j].ReadOnly = game.SudokuGrid[i, j].ReadOnly = true;
						dvg_grid[i, j].Style.ForeColor = SystemColors.ControlDarkDark;
					}
					else
					{
						dvg_grid[i, j].ReadOnly = game.SudokuGrid[i, j].ReadOnly = false;
						dvg_grid[i, j].Style.ForeColor = SystemColors.WindowText;
					}
				}
			}

			progressBar.Style = ProgressBarStyle.Blocks;
			game.State = GameState.PLAYING;
			//CopyGridIntoDVG();
			//dvg_grid.Invalidate();
		}
		#endregion

		#region Stopwatch Event
		private void b_stopwatchControl_Click(object sender, EventArgs e)
		{
			if (game.SudokuStopwatch.Activated)
			{
				game.SudokuStopwatch.Activated = false;
				b_stopwatchControl.Text = pauseButtonsString[1];
			}
			else
			{
				game.SudokuStopwatch.Activated = true;
				b_stopwatchControl.Text = pauseButtonsString[0];
			}
		}

		public void SyncStopwatch()
		{
			if (this.tb_stopwatch.InvokeRequired)
			{
				try
				{
					tb_stopwatch.Invoke(new Action(() => { this.tb_stopwatch.Text = game.SudokuStopwatch.ToString(); }));
				}
				catch (InvalidAsynchronousStateException ex)
				{
#if DEBUG
					Console.Error.WriteLine(ex.StackTrace);
#endif
				}
			}
			else
				this.tb_stopwatch.Text = game.SudokuStopwatch.ToString();
		}
		#endregion

		#region DataGridView Events
		/// <summary>
		/// This method is called when a cell is changed. When the user try to enter data in the dvg during 'PAUSE' state,
		/// the function will refuse.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dvg_grid_CellValueChanged(object sender, DataGridViewCellEventArgs e)
		{
			try
			{
				// Getting the value of the changed cell
				object o = dvg_grid.Rows[e.RowIndex].Cells[e.ColumnIndex].Value;
				byte value = 0;
				// If the value is a string, convert it into one
				if (o is string)
				{
					string s = (string)o;

					if (!s.Equals(""))
					{
						try
						{
							value = byte.Parse((string)o);
						}
						catch (Exception ex)
						{
							System.Console.Error.WriteLine(ex.StackTrace);
							if (game != null && (game.State == GameState.PLAYING || forceChangeCell) && game.SudokuGrid != null && game.SudokuGrid[e.ColumnIndex, e.RowIndex] != null)
								value = game.SudokuGrid[e.ColumnIndex, e.RowIndex].Value;
						}
					}
					else
						value = 0;
				}
				// If the value if a number, the program converts it into a byte
				else if (o is byte || o is sbyte || o is short || o is ushort || o is int || o is uint || o is long || o is ulong ||
					o is float || o is double || o is decimal)
				{
					try
					{
						value = Convert.ToByte(o);
					}
					catch (Exception ex)
					{
						System.Console.Error.WriteLine(ex.StackTrace);
						if (game != null && (game.State == GameState.PLAYING || forceChangeCell) && game.SudokuGrid != null && game.SudokuGrid[e.ColumnIndex, e.RowIndex] != null)
							value = game.SudokuGrid[e.ColumnIndex, e.RowIndex].Value;
					}
				}
				// Otherwise, the value is 0
				else
					value = 0;

				// See the doc comment of forceChangeCell for more details about this boolean. It gives a 'administrator' action for this method.
				if (forceChangeCell)
					SetCellValue(value, e.ColumnIndex, e.RowIndex);
				else
					SetCellValueWithCheck(value, e.ColumnIndex, e.RowIndex);

				forceChangeCell = false;
			}
			catch (IndexOutOfRangeException ex)
			{
				Console.Error.WriteLine(ex.StackTrace);
			}
		}

		private void dvg_grid_CellEnter(object sender, DataGridViewCellEventArgs e)
		{
			activeCell = new Point(e.ColumnIndex, e.RowIndex);
			/*
#if DEBUG
			System.Console.WriteLine("DEBUG> Active Cell[" + activeCell.X + ", " + activeCell.Y + "]");
#endif
			*/
			gb_cellOption.Visible = true;

			if (activeCell.X != -1 && activeCell.Y != -1)
			{
				n_cellValue.Value = game.SudokuGrid[activeCell.X, activeCell.Y].Value;

				ObservableCollection<byte> list = game.SudokuGrid[activeCell.X, activeCell.Y].Draft;
				lb_draft.Items.Clear();
				foreach (byte d in list)
					lb_draft.Items.Add(d);
			}
		}

		private void dvg_grid_CellLeave(object sender, DataGridViewCellEventArgs e)
		{
			if (dvg_grid.SelectedCells == null || dvg_grid.SelectedCells.Count == 0)
			{
				activeCell = new Point(-1, -1);
				gb_cellOption.Visible = false;
			}
		}
		
		private void dvg_grid_SizeChanged(object sender, EventArgs e)
		{
			foreach (DataGridViewRow row in dvg_grid.Rows)
				row.Height = dvg_grid.Height / dvg_grid.Rows.Count;
		}

		/// <summary>
		/// Set the cell value as the method <c>SetCellValue</c>, but also check if the digit is well-placed in the grid (highlight the cell
		/// in dvg for error).
		/// </summary>
		/// <param name="value"></param>
		/// <param name="x"></param>
		/// <param name="y"></param>
		private void SetCellValueWithCheck(byte value, int x, int y)
		{
			if (x < 0 || x >= Grid.NB_COLUMNS || y < 0 || y >= Grid.NB_ROWS)
				return;

			if (!(value >= 0 && value <= 9))
				value = 0;

			// The method checks if the grid is correct with this new value (the value is not in grid yet):
			if (game != null && value != 0 && game.State == GameState.PLAYING)
			{
				List<Point> wrongDigits;
				bool result = game.CheckMove(value, x, y, out wrongDigits);
				for (int i = 0; i < dvg_grid.ColumnCount; i++)
					for (int j = 0; j < dvg_grid.RowCount; j++)
						dvg_grid[i, j].Style.BackColor = wrongDigits.Contains(new Point(i, j)) ? Color.PaleVioletRed : SystemColors.Window;
				
				try
				{
					// The method put the value in grid (and in the dvg_grid also, as grid and dvg are bound)
					if (game.SudokuGrid != null && game.SudokuGrid[x, y] != null)
						SetCellValue(value, x, y);
				}
				catch (IndexOutOfRangeException ex)
				{
					Console.Error.WriteLine(ex.StackTrace);
				}

				// Finally, at the very end, the program checks if the grid is complete and equal to the solution
				/*if (game != null)
					game.CheckWin();*/
			}
			// If the value is 0, don't display it in the cell
			else
				dvg_grid[x, y].Value = "";
		}

		/// <summary>
		/// Set the cell value for the cell (x, y) in the virtual AND physical grid. Before, it checks if <paramref name="value"/>,
		/// <paramref name="x"/> and <paramref name="y"/> are valid, and then set the value. If value is 0, the dvg will receive an
		/// empty string.
		/// </summary>
		/// <param name="value"></param>
		/// <param name="x"></param>
		/// <param name="y"></param>
		private void SetCellValue(byte value, int x, int y)
		{
			if (x < 0 || x >= Grid.NB_COLUMNS || y < 0 || y >= Grid.NB_ROWS)
				return;

			if (!(value >= 0 && value <= 9))
				value = 0;
			
			if (game != null && (game.State == GameState.PLAYING || forceChangeCell))
			{
				game.SudokuGrid[x, y].Value = value;
				
				if (value != 0)
					dvg_grid[x, y].Value = value.ToString();
				else
					dvg_grid[x, y].Value = "";
				dvg_grid[x, y].ValueType = typeof(string);
				
				forceChangeCell = false;
			}

			/*if (game != null)
				game.CheckWin();*/
		}

		/// <summary>
		/// Copy all the virtual grid into the DVG grid after cheking the nullity of <c>game</c>, <c>game.grid</c> and <c>dvg_grid</c>
		/// </summary>
		public void CopyGridIntoDVG()
		{
			if (game != null && game.SudokuGrid != null && dvg_grid != null)
			{
				for (int i = 0; i < Grid.NB_COLUMNS; i++)
				{
					for (int j = 0; j < Grid.NB_ROWS; j++)
					{
						forceChangeCell = true;
						SetCellValue(game.SudokuGrid[i, j].Value, i, j);
					}
				}
			}
		}
		#endregion

		#region Cell Value Event
		private void n_cellValue_ValueChanged(object sender, EventArgs e)
		{
			// If X or Y is -1, then activeCell is not usable, and the program assumes there is no active cell in the DVG.
			if (activeCell.X == -1 || activeCell.Y == -1)
			{
				try
				{
					byte value = Convert.ToByte(n_cellValue.Value);
					if (value < 0 || value > 9)
					{
						n_cellValue.Value = 0;
						return;
					}

					SetCellValueWithCheck(value, activeCell.X, activeCell.Y);
				}
				catch (OverflowException ex)
				{
					System.Console.Error.WriteLine(ex.StackTrace);
					n_cellValue.Value = game.SudokuGrid[activeCell.X, activeCell.Y].Value;
				}
			}
		}
		#endregion

		#region ListBox Draft Events
		private void lb_draft_SelectedIndexChanged(object sender, EventArgs e)
		{
			b_editDraft.Enabled = (lb_draft.SelectedIndex != -1);
			b_removeDraft.Enabled = (lb_draft.SelectedIndex != -1);
		}
		#endregion

		#region Draft Buttons Events
		private void b_editDraft_Click(object sender, EventArgs e)
		{
			if (lb_draft.SelectedIndex != -1 && activeCell.X != -1 && activeCell.Y != -1 && game.State == GameState.PLAYING)
			{
				try
				{
					string answer = Microsoft.VisualBasic.Interaction.InputBox("Enter the new value:", "Edit Draft: " + lb_draft.SelectedItem.ToString(), game.SudokuGrid[activeCell.X, activeCell.Y].Value.ToString());
					if (answer != null && answer.Length > 0)
					{
						char result = answer[0];
						if (char.IsNumber(result) && result >= '0' && result <= '9')
						{
							byte value = Convert.ToByte(result - '0');
							game.SudokuGrid[activeCell.X, activeCell.Y].Draft[lb_draft.SelectedIndex] = value;
							lb_draft.Items[lb_draft.SelectedIndex] = value;
						}
						else
							MessageBox.Show("Invalid format.", "Error", MessageBoxButtons.OK);
					}
				} catch (IndexOutOfRangeException ex)
				{
					System.Console.Error.WriteLine(ex.StackTrace);
				}
			}
		}

		private void b_addDraft_Click(object sender, EventArgs e)
		{
			if (activeCell.X != -1 && activeCell.Y != -1 && game.State == GameState.PLAYING)
			{
				string answer = Microsoft.VisualBasic.Interaction.InputBox("Enter a value:", "Add Draft", "0");
				if (answer != null && answer.Length > 0)
				{
					char result = answer[0];
					if (char.IsNumber(result) && result >= '0' && result <= '9')
					{
						byte value = Convert.ToByte(result - '0');
						game.SudokuGrid[activeCell.X, activeCell.Y].Draft.Add(value);
						lb_draft.Items.Add(value);
					}
					else
						MessageBox.Show("Invalid format.", "Error", MessageBoxButtons.OK);
				}
			}
		}

		private void b_removeDraft_Click(object sender, EventArgs e)
		{
			if (lb_draft.SelectedIndex != -1 && activeCell.X != -1 && activeCell.Y != -1 && game.State == GameState.PLAYING)
			{
				if (MessageBox.Show("Are you sure you want to delete the draft " + lb_draft.SelectedItem.ToString() + " of the cell (" + (activeCell.X + 1) + " ; " + (activeCell.Y + 1) + ")?", "Delete draft " + lb_draft.SelectedItem.ToString(), MessageBoxButtons.YesNo) == DialogResult.Yes)
				{
					game.SudokuGrid[activeCell.X, activeCell.Y].Draft.RemoveAt(lb_draft.SelectedIndex);
					lb_draft.Items.RemoveAt(lb_draft.SelectedIndex);
				}
			}
		}
		#endregion

		#region Menu Events
		#region File Events
		private void mi_newGame_Click(object sender, EventArgs e)
		{
			progressBar.Style = ProgressBarStyle.Marquee;
			l_status.Text = "Computing...";

			// Reseting the dvg_grid and sudokugrid object
			for (int i = 0; i < dvg_grid.ColumnCount; i++)
			{
				for (int j = 0; j < dvg_grid.RowCount; j++)
				{
					dvg_grid[i, j].Value = "";
					dvg_grid[i, j].ValueType = typeof(string);
					dvg_grid[i, j].Style.BackColor = SystemColors.Window;
					dvg_grid[i, j].ReadOnly = false;
					dvg_grid[i, j].Style.ForeColor = SystemColors.WindowText;

					game.SudokuGrid[i, j].Value = 0;
					game.SudokuGrid[i, j].Draft.Clear();
					game.SudokuGrid[i, j].ReadOnly = false;
				}
			}

			game.ComputeGrid(OnGridIsComputed);
		}

		private void mi_save_Click(object sender, EventArgs e)
		{
			Saver.Save(game);
		}

		private void mi_open_Click(object sender, EventArgs e)
		{
			Game g = Saver.Load();
			game.LoadGameInstance(g);

			// Updating the dvg grid
			CopyGridIntoDVG();
			if (game.SudokuGrid != null)
				for (int i = 0; i < Grid.NB_COLUMNS; i++)
					for (int j = 0; j < Grid.NB_COLUMNS; j++)
						if (game.SudokuGrid[i, j] != null)
							dvg_grid[i, j].ReadOnly = game.SudokuGrid[i, j].ReadOnly;

			for (int i = 0; i < dvg_grid.ColumnCount; i++)
			{
				for (int j = 0; j < dvg_grid.RowCount; j++)
				{
					dvg_grid[i, j].Style.BackColor = SystemColors.Window;
					if (game.SudokuGrid[i, j].ReadOnly)
					{
						dvg_grid[i, j].ReadOnly = true;
						dvg_grid[i, j].Style.ForeColor = SystemColors.ControlDarkDark;
					}
					else
					{
						dvg_grid[i, j].ReadOnly = false;
						dvg_grid[i, j].Style.ForeColor = SystemColors.WindowText;
					}
				}
			}
		}

		private void mi_exit_Click(object sender, EventArgs e)
		{
			Application.Exit();
		}
		#endregion

		#region Edit Events

		#endregion

		#region Window Events
		private void mi_displayHeader_CheckedChanged(object sender, EventArgs e)
		{
			p_header.Visible = mi_displayHeader.Checked;
		}
		#endregion

		#region Debug Events
		private void mi_breakNow_Click(object sender, EventArgs e)
		{
			try
			{
				System.Diagnostics.Debugger.Break();
			} catch (System.Security.SecurityException ex)
			{
				System.Console.Error.WriteLine(ex.StackTrace);
				MessageBox.Show("Error: " + ex.StackTrace, "Error Debug", MessageBoxButtons.OK);
			}
		}

		#region Print Grid Events
		private void mi_printVirtualGrid_Click(object sender, EventArgs e)
		{
			Console.WriteLine("Virtual grid:");
			Console.WriteLine(Game.FormatGrid(game.SudokuGrid));
		}

		private void mi_printPhysicalGrid_Click(object sender, EventArgs e)
		{
			Grid physical = new Grid();

			for (int i = 0; i < Grid.NB_COLUMNS; i++)
			{
				for (int j = 0; j < Grid.NB_ROWS; j++)
				{
					if (Convert.ToString(dvg_grid[i, j].Value).Equals(""))
						physical[i, j] = new Cell(new Point(i+1, j+1), 0);
					else
						physical[i, j] = new Cell(new Point(i + 1, j + 1), Convert.ToByte(this.dvg_grid[i, j].Value));
				}
			}

			Console.WriteLine("Physical grid:");
			Console.WriteLine(Game.FormatGrid(physical));
		}

		private void mi_printSolutionGrid_Click(object sender, EventArgs e)
		{
			Console.WriteLine("Solution grid:");
			Console.WriteLine(Game.FormatGrid(game.Solution));
		}
		#endregion

		private void mi_forceCopyDebug_Click(object sender, EventArgs e)
		{
			CopyGridIntoDVG();
		}

		private void mi_magicDebug_Click(object sender, EventArgs e)
		{
			if (game != null)
			{
				if (MessageBox.Show("Is current grid valid?\n" + (game.SolveGrid() != null) + "\nWould you like to enter into the code by using the Great Debugger?", "The Magic Debugging Dialogbox", MessageBoxButtons.YesNo) == DialogResult.Yes)
				{
					Debugger.Break();
					game.SolveGrid();
				}
			}
			else
				MessageBox.Show("Too bad :(\nThe `game` object is not initialized yet. Are you faster than the computer?", "The Magic Debugging Dialogbox", MessageBoxButtons.OK);
		}

		private void mi_solveSudokuDebug_Click(object sender, EventArgs e)
		{
			if (game != null && game.Solution != null)
			{
				for (int i = 0; i < Grid.NB_COLUMNS; i++)
				{
					for (int j = 0; j < Grid.NB_ROWS; j++)
					{
						forceChangeCell = true;
						SetCellValue(game.Solution[i, j].Value, i, j);
					}
				}
			}
		}
		
		private void mi_setDefaultGrid_Click(object sender, EventArgs e)
		{
			for (int i = 0; i < dvg_grid.ColumnCount; i++)
			{
				for (int j = 0; j < dvg_grid.RowCount; j++)
				{
					dvg_grid[i, j].Value = "";
					dvg_grid[i, j].ValueType = typeof(string);
					dvg_grid[i, j].Style.BackColor = SystemColors.Window;
					dvg_grid[i, j].ReadOnly = false;
					dvg_grid[i, j].Style.ForeColor = SystemColors.WindowText;

					game.SudokuGrid[i, j].Value = 0;
					game.SudokuGrid[i, j].Draft.Clear();
					game.SudokuGrid[i, j].ReadOnly = false;
				}
			}

			game.SetDefaultGrid();
			OnGridIsComputed();
		}
		#endregion

		#region About Events
		private void mi_helpMe_Click(object sender, EventArgs e)
		{
			Random rand = new Random((int) DateTime.Now.Ticks);
			List<string> messages = new List<string>(5);
			messages.Add("You can do it!");
			messages.Add("This grid SHALL be solved!");
			messages.Add("Go on! You almost did it!");

			try
			{
				MessageBox.Show(messages[rand.Next(0, messages.Count)], "Motivation!", MessageBoxButtons.OK);
			}
			catch (IndexOutOfRangeException ex)
			{
				Console.Error.WriteLine(ex.StackTrace);
			}
		}

		private void mi_about_Click(object sender, EventArgs e)
		{
			AboutDialogBox about = new AboutDialogBox();
			about.ShowDialog(this);
		}
		#endregion
		#endregion
	}
}
